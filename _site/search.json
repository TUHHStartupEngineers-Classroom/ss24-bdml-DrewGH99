[
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh.\nThis is a .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#header-2",
    "href": "content/01_journal/01_tidyverse.html#header-2",
    "title": "Tidyverse",
    "section": "\n2.1 Header 2",
    "text": "2.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "Challenge 1/Chapter_1_Challenge.html",
    "href": "Challenge 1/Chapter_1_Challenge.html",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "Challenge 1/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "Challenge 1/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %&gt;% glimpse()\n\nRows: 1,225,765\nColumns: 8\n$ symbol   &lt;chr&gt; \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n$ date     &lt;date&gt; 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n$ open     &lt;dbl&gt; 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n$ high     &lt;dbl&gt; 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n$ low      &lt;dbl&gt; 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n$ close    &lt;dbl&gt; 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n$ volume   &lt;dbl&gt; 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n$ adjusted &lt;dbl&gt; 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n# Apply your data transformation skills!\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "Challenge 1/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "href": "Challenge 1/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 2 - Convert to User-Item Format",
    "text": "Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl &lt;- read_rds(\"sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n# A tibble: 141,340 × 3\n   symbol date       pct_return\n   &lt;chr&gt;  &lt;date&gt;          &lt;dbl&gt;\n 1 MSFT   2018-01-03   0.00465 \n 2 MSFT   2018-01-04   0.00880 \n 3 MSFT   2018-01-05   0.0124  \n 4 MSFT   2018-01-08   0.00102 \n 5 MSFT   2018-01-09  -0.000680\n 6 MSFT   2018-01-10  -0.00453 \n 7 MSFT   2018-01-11   0.00296 \n 8 MSFT   2018-01-12   0.0173  \n 9 MSFT   2018-01-16  -0.0140  \n10 MSFT   2018-01-17   0.0203  \n# ℹ 141,330 more rows\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n# Convert to User-Item Format\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "Challenge 1/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "href": "Challenge 1/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 3 - Perform K-Means Clustering",
    "text": "Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl &lt;- read_rds(\"stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n\n\n# Create kmeans_obj for 4 centers\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss"
  },
  {
    "objectID": "Challenge 1/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "Challenge 1/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 4 - Find the optimal value of K",
    "text": "Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper &lt;- function(center = 3) {\n    stock_date_matrix_tbl %&gt;%\n        select(-symbol) %&gt;%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n# Use purrr to map\n\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "Challenge 1/Chapter_1_Challenge.html#step-5---apply-umap",
    "href": "Challenge 1/Chapter_1_Challenge.html#step-5---apply-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 5 - Apply UMAP",
    "text": "Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n# Apply UMAP\n\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "Challenge 1/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "Challenge 1/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 6 - Combine K-Means and UMAP",
    "text": "Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   &lt;- read_rds(\"umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\n\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %&gt;% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\n\n\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %&gt;% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "Challenge01.html",
    "href": "Challenge01.html",
    "title": "Machine Learning Fundamentals",
    "section": "",
    "text": "Step 1\n\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(broom)\nlibrary(umap)\n\nsp_500_daily_returns_tbl  &lt;- read_rds(\"Challenge 1/sp_500_prices_tbl.rds\") %&gt;%\n  select(symbol, date, adjusted) %&gt;%\n  filter(year(date) &gt;= 2018 ) %&gt;%\n  group_by(symbol) %&gt;%\n  mutate(lagPrice = lag(adjusted, n = 1L)) %&gt;%\n  filter(is.na(lagPrice) == 0) %&gt;%\n  mutate(priceDif = adjusted - lagPrice) %&gt;%\n  mutate(pct_return = priceDif/lagPrice) %&gt;%\n  ungroup(symbol) %&gt;%\n  select(symbol, date, pct_return)\n\nhead(sp_500_daily_returns_tbl, n = 10)\n\n# A tibble: 10 × 3\n   symbol date       pct_return\n   &lt;chr&gt;  &lt;date&gt;          &lt;dbl&gt;\n 1 MSFT   2018-01-03   0.00465 \n 2 MSFT   2018-01-04   0.00880 \n 3 MSFT   2018-01-05   0.0124  \n 4 MSFT   2018-01-08   0.00102 \n 5 MSFT   2018-01-09  -0.000680\n 6 MSFT   2018-01-10  -0.00453 \n 7 MSFT   2018-01-11   0.00296 \n 8 MSFT   2018-01-12   0.0173  \n 9 MSFT   2018-01-16  -0.0140  \n10 MSFT   2018-01-17   0.0203  \n\n\n\n\nStep 2\n\nstock_date_matrix_tbl &lt;- sp_500_daily_returns_tbl %&gt;%\n  pivot_wider(names_from = date, values_from = pct_return)\nhead(stock_date_matrix_tbl, n=10)\n\n# A tibble: 10 × 283\n   symbol `2018-01-03` `2018-01-04` `2018-01-05` `2018-01-08` `2018-01-09`\n   &lt;chr&gt;         &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n 1 MSFT       0.00465     0.00880       0.0124        0.00102    -0.000680\n 2 AAPL      -0.000174    0.00465       0.0114       -0.00371    -0.000115\n 3 AMZN       0.0128      0.00448       0.0162        0.0144      0.00468 \n 4 FB         0.0179     -0.00184       0.0137        0.00765    -0.00218 \n 5 JNJ        0.00955    -0.0000712     0.00825       0.00127     0.0159  \n 6 JPM        0.00102     0.0143       -0.00642       0.00148     0.00507 \n 7 GOOG       0.0164      0.00362       0.0146        0.00427    -0.000614\n 8 GOOGL      0.0171      0.00388       0.0133        0.00353    -0.00127 \n 9 XOM        0.0196      0.00138      -0.000806      0.00450    -0.00425 \n10 BAC       -0.00334     0.0131        0.00464      -0.00692     0.00498 \n# ℹ 277 more variables: `2018-01-10` &lt;dbl&gt;, `2018-01-11` &lt;dbl&gt;,\n#   `2018-01-12` &lt;dbl&gt;, `2018-01-16` &lt;dbl&gt;, `2018-01-17` &lt;dbl&gt;,\n#   `2018-01-18` &lt;dbl&gt;, `2018-01-19` &lt;dbl&gt;, `2018-01-22` &lt;dbl&gt;,\n#   `2018-01-23` &lt;dbl&gt;, `2018-01-24` &lt;dbl&gt;, `2018-01-25` &lt;dbl&gt;,\n#   `2018-01-26` &lt;dbl&gt;, `2018-01-29` &lt;dbl&gt;, `2018-01-30` &lt;dbl&gt;,\n#   `2018-01-31` &lt;dbl&gt;, `2018-02-01` &lt;dbl&gt;, `2018-02-02` &lt;dbl&gt;,\n#   `2018-02-05` &lt;dbl&gt;, `2018-02-06` &lt;dbl&gt;, `2018-02-07` &lt;dbl&gt;, …\n\n\n\n\nStep 3\n\nstock_date_matrix_tbl &lt;- read_rds(\"Challenge 1/stock_date_matrix_tbl.rds\")\n\nkmeans_obj &lt;- stock_date_matrix_tbl %&gt;% \n  select(-symbol) %&gt;%\n  kmeans(centers = 4, nstart = 20)\n\nbroom::glance(kmeans_obj)\n\n# A tibble: 1 × 4\n  totss tot.withinss betweenss  iter\n  &lt;dbl&gt;        &lt;dbl&gt;     &lt;dbl&gt; &lt;int&gt;\n1  33.6         29.2      4.40     3\n\n\n\n\nStep 4\n\nkmeans_mapper &lt;- function(center = 3) {\n  stock_date_matrix_tbl %&gt;%\n    select(-symbol) %&gt;%\n    kmeans(centers = center, nstart = 20)\n}\n\nkmeans_mapped_tbl &lt;- tibble(centers = 1:30) %&gt;%\n  mutate(k_means = centers %&gt;% map(kmeans_mapper)) %&gt;%\n  mutate(glance  = k_means %&gt;% map(glance))\n\nkmeans_mapped_tbl %&gt;%\n  unnest(glance) %&gt;%\n  select(centers, tot.withinss) %&gt;%\n  ggplot(aes(centers, tot.withinss)) +\n  geom_point(color = \"black\", size = 4) +\n  geom_line(color = \"gray\", size = 1) +\n  ggrepel::geom_label_repel(aes(label = centers), color = \"black\") +\n  theme_minimal() +\n  labs(title = \"Skree Plot\")\n\n\n\n\n\n\n\n\n\n\nStep 5\n\nk_means_mapped_tbl &lt;- read_rds(\"Challenge 1/k_means_mapped_tbl.rds\")\n\numap_results &lt;- stock_date_matrix_tbl %&gt;%\n  select(-symbol) %&gt;%\n  umap()\n\numap_results_tbl &lt;- umap_results$layout %&gt;%\n  as_tibble(.name_repair = \"unique\") %&gt;% \n  set_names(c(\"V1\", \"V2\")) %&gt;%\n  bind_cols(\n    stock_date_matrix_tbl %&gt;% select(symbol)\n  )\n\numap_results_tbl %&gt;%\n  ggplot(aes(V1, V2)) +\n  geom_point(alpha = 0.5) + \n  labs(title = \"UMAP Projection\") +\n  theme_tq()\n\n\n\n\n\n\n\n\n\n\nStep 6\n\nk_means_mapped_tbl &lt;- read_rds(\"Challenge 1/k_means_mapped_tbl.rds\")\numap_results_tbl   &lt;- read_rds(\"Challenge 1/umap_results_tbl.rds\")\nsp_500_index_tbl &lt;- read_rds(\"Challenge 1/sp_500_index_tbl.rds\")\n\nkmeans_10_obj &lt;- k_means_mapped_tbl %&gt;%\n  pull(k_means) %&gt;%\n  pluck(10)\n\nkmeans_10_clusters_tbl &lt;- kmeans_10_obj %&gt;% \n  augment(stock_date_matrix_tbl) %&gt;%\n  select(symbol, .cluster)\n\numap_kmeans_results_tbl &lt;- umap_results_tbl %&gt;%\n  left_join(kmeans_10_clusters_tbl, by = join_by(symbol)) %&gt;%\n  left_join(sp_500_index_tbl %&gt;%\n              select(symbol, company, sector),\n              by = join_by(symbol))\n\numap_kmeans_results_tbl %&gt;%\n  ggplot(aes(V1, V2, color = .cluster)) +\n  geom_point(alpha = 0.5) +\n  scale_color_brewer(palette = \"Set1\") +\n  labs(title = \"Company Segmentation: 2D Projection\")"
  },
  {
    "objectID": "Challenge02.html",
    "href": "Challenge02.html",
    "title": "Supervised ML - Regression",
    "section": "",
    "text": "library(tidyverse)\nlibrary(parsnip)\nlibrary(recipes)\nlibrary(rsample)\nlibrary(tidymodels)\nlibrary(yardstick)\n\n\n# Build Model ----\nlm_mod &lt;- \n  linear_reg() %&gt;% \n  set_engine(\"lm\")\n\n\n# Create Features with Recipes Package ---- \nbike_features_tbl &lt;- readRDS(\"Challenge 2/bike_features_tbl.rds\")\n\n# data manipulation to select predictors and outcome\nbike_features_tbl &lt;- bike_features_tbl %&gt;% \n  select(model:url, `Rear Derailleur`, `Shift Lever`) %&gt;% \n  mutate(id = row_number()) %&gt;% \n  select(id, everything(), -url)\n\n#  Split data ----\nset.seed(seed = 1114)\nsplit_obj &lt;- rsample::initial_split(bike_features_tbl, prop   = 0.80, \n                                    strata = \"category_2\")\n\ntrain_tbl &lt;- training(split_obj)\ntest_tbl  &lt;- testing(split_obj)\n\ntrain_tbl &lt;- train_tbl %&gt;% set_names(str_replace_all(names(train_tbl), \" |-\", \"_\"))\ntest_tbl  &lt;- test_tbl  %&gt;% set_names(str_replace_all(names(test_tbl),  \" |-\", \"_\"))\n\n\n# Recipe ----\n\n#Create recipe\ntrain_recipe_obj &lt;- recipe(price ~ ., data = train_tbl) %&gt;% \n  #step_rm(...) %&gt;% \n  step_dummy(all_nominal_predictors(), -all_outcomes(), one_hot = T) %&gt;%  # using all nominal predictors here prevented errors\n  update_role(id, model, new_role = \"ID\") %&gt;%\n  step_zv(all_predictors()) \n  #prep()\n\ntest_recipe_obj &lt;- recipe(price ~ ., data = test_tbl) %&gt;% \n  #step_rm(...) %&gt;% \n  step_dummy(all_nominal(), -all_outcomes(), one_hot = T) %&gt;%  # Check out the argument one_hot = T\n  update_role(id, model, new_role = \"ID\") %&gt;%\n  step_zv(all_predictors())\n  #prep()\n\n#train_transformed_tbl &lt;- bake(train_recipe_obj, train_tbl)\n#test_transformed_tbl  &lt;- bake(test_recipe_obj, test_tbl)\n\n# workflow ----\n#create workflow\nbikes_workflow &lt;-\n  workflow() %&gt;%\n  add_model(lm_mod) %&gt;%\n  add_recipe(train_recipe_obj)\n\n#fit to training data\nbikes_fit &lt;-\n  bikes_workflow %&gt;%\n  fit(data = train_tbl)\n\n\n# metrics ----\npredictions &lt;- predict(bikes_fit, new_data = test_tbl) %&gt;%\n  bind_cols(test_tbl %&gt;% select(price))\n\nmetrics &lt;- predictions %&gt;%\n  yardstick::metrics(truth = price, estimate = .pred)\n\nmetrics\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard     980.   \n2 rsq     standard       0.734\n3 mae     standard     616."
  },
  {
    "objectID": "Challenge03.html",
    "href": "Challenge03.html",
    "title": "Automated Machine Learning with H2O(I)",
    "section": "",
    "text": "Challenge Responses\n\nCompensation Features\n\nWhat can you deduce about the interaction between Monthly Income and Attrition?\nAnswer: c) Those that are leaving have a lower Monthly Income\n\nCompensation Features\n\nWhat can you deduce about the interaction between Percent Salary Hike and Attrition?\nAnswer: c) Those that are leaving have lower Percent Salary Hike I’m not sure if the difference is statistically significant\n\nCompensation Features\n\nWhat can you deduce about the interaction between Stock Option Level and Attrition?\nAnswer: b) Those that are staying have a higher stock option level\n\nSurvey Results\n\nWhat can you deduce about the interaction between Environment Satisfaction and Attrition?\nAnswer: c) It’s difficult to deduce anything based on the visualization\n\nSurvey Results\n\nWhat can you deduce about the interaction between Work Life Balance and Attrition\nAnswer: b) Those that are staying have a higher density of 2’s and 3’s\n\nPerformance Data\n\nWhat Can you deduce about the interaction between Job Involvement and Attrition?\nAnswer: a) Those that are leaving have a lower density of 3’s and 4’s\n\nWork-Life Features\n\nWhat can you deduce about the interaction between Over Time and Attrition?\nAnswer: a) The proportion of those leaving that are working Over Time are high compared to those that are not leaving\n\nTraining and Education\n\nWhat can you deduce about the interaction between Training Times Last Year and Attrition\nAnswer: b) People that leave tend to have less annual trainings\n\nTime-Based Features\n\nWhat can you deduce about the interaction between Years At Company and Attrition\nAnswer: b) People that leave tend to have less working years at the company\n\nTime-Based Features\n\nWhat can you deduce about the interaction between Years Since Last Promotion and Attrition?\nAnswer: c) It’s difficult to deduce anything based on the visualization\n\n\nScript\n\nlibrary(tidyverse)\nlibrary(GGally)\n\nemployee_attrition_tbl &lt;- read_csv(\"Challenge 3/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\n\n\ndata &lt;- employee_attrition_tbl %&gt;%\n  select(Attrition, Age, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome)\n\nplot_ggpairs &lt;- function(data, color = NULL, density_alpha = 0.5) {\n  \n  color_expr &lt;- enquo(color)\n  \n  if (rlang::quo_is_null(color_expr)) {\n    \n    g &lt;- data %&gt;%\n      ggpairs(lower = \"blank\") \n    \n  } else {\n    \n    color_name &lt;- quo_name(color_expr)\n    \n    g &lt;- data %&gt;%\n      ggpairs(mapping = aes_string(color = color_name), \n              lower = \"blank\", legend = 1,\n              diag = list(continuous = wrap(\"densityDiag\", \n                                            alpha = density_alpha))) +\n      theme(legend.position = \"bottom\")\n  }\n  \n  return(g)\n  \n}\n\n#   1. Descriptive features: age, gender, marital status \nemployee_attrition_tbl %&gt;%\n  select(Attrition, Age, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n#   2. Employment features: department, job role, job level\nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"employee\"), contains(\"department\"), contains(\"job\")) %&gt;%\n  plot_ggpairs(Attrition) \n\n\n\n\n\n\n\n#   3. Compensation features: HourlyRate, MonthlyIncome, StockOptionLevel \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"income\"), contains(\"rate\"), contains(\"salary\"), contains(\"stock\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n#   4. Survey Results: Satisfaction level, WorkLifeBalance \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"satisfaction\"), contains(\"life\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n#   5. Performance Data: Job Involvment, Performance Rating\nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"performance\"), contains(\"involvement\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n#   6. Work-Life Features \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"overtime\"), contains(\"travel\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n#   7. Training and Education \nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"training\"), contains(\"education\")) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n#   8. Time-Based Features: Years at company, years in current role\nemployee_attrition_tbl %&gt;%\n  select(Attrition, contains(\"years\")) %&gt;%\n  plot_ggpairs(Attrition)"
  },
  {
    "objectID": "Challenge04.html",
    "href": "Challenge04.html",
    "title": "Automated Machine Learning with H2O(II)",
    "section": "",
    "text": "library(tidyverse)\nlibrary(rsample)\nlibrary(recipes)\nlibrary(h2o)\n\n# 1) Load the training & test dataset\n\nbackorders_tbl &lt;- read_csv(\"Challenge 4/product_backorders.csv\")\n\n# 2) Specifiy the response and predictor variables\n\nprocessed_tbl &lt;- backorders_tbl %&gt;%\n  mutate_if(is.character, as.factor) \n\n# Split Data\nset.seed(seed = 1114)\nsplit_obj &lt;- rsample::initial_split(processed_tbl, prop = 0.85)\n\n# Assign training and test data\ntrain_readable_tbl &lt;- training(split_obj)\ntest_readable_tbl  &lt;- testing(split_obj)\n\nrecipe_obj &lt;- recipe(went_on_backorder ~ ., data = train_readable_tbl) %&gt;%\n  step_zv(all_predictors()) %&gt;%\n  prep()\n\ntrain_tbl &lt;- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  &lt;- bake(recipe_obj, new_data = test_readable_tbl)\n\n# 3) Run AutoML specifying the stopping criterion\n\nh2o.init()\n\n Connection successful!\n\nR is connected to the H2O cluster: \n    H2O cluster uptime:         8 hours 32 minutes \n    H2O cluster timezone:       Europe/Berlin \n    H2O data parsing timezone:  UTC \n    H2O cluster version:        3.44.0.3 \n    H2O cluster version age:    6 months and 4 days \n    H2O cluster name:           H2O_started_from_R_Drew_Gilmore_jzg642 \n    H2O cluster total nodes:    1 \n    H2O cluster total memory:   1.61 GB \n    H2O cluster total cores:    4 \n    H2O cluster allowed cores:  4 \n    H2O cluster healthy:        TRUE \n    H2O Connection ip:          localhost \n    H2O Connection port:        54321 \n    H2O Connection proxy:       NA \n    H2O Internal Security:      FALSE \n    R Version:                  R version 4.4.0 (2024-04-24 ucrt) \n\nsplit_h2o &lt;- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1385)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o &lt;- split_h2o[[1]]\nvalid_h2o &lt;- split_h2o[[2]]\ntest_h2o  &lt;- as.h2o(test_tbl)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Set the target and predictors\ny &lt;- \"went_on_backorder\"\nx &lt;- setdiff(names(train_h2o), y)\n\nautoml_models_h2o &lt;- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 30,\n  nfolds            = 5 \n)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |============                                                          |  17%\n23:30:54.666: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n23:30:54.669: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |==============================                                        |  43%\n  |                                                                            \n  |====================================                                  |  52%\n  |                                                                            \n  |===========================================                           |  61%\n  |                                                                            \n  |====================================================                  |  74%\n  |                                                                            \n  |===========================================================           |  85%\n  |                                                                            \n  |===================================================================   |  96%\n  |                                                                            \n  |======================================================================| 100%\n\n# 4) View the leaderboard\n\nautoml_models_h2o@leaderboard\n\n                                                 model_id       auc   logloss\n1 StackedEnsemble_BestOfFamily_1_AutoML_6_20240624_233054 0.9461077 0.1842937\n2                          GBM_1_AutoML_6_20240624_233054 0.9460588 0.1880829\n3 StackedEnsemble_BestOfFamily_2_AutoML_6_20240624_233054 0.9457692 0.1848656\n4                          GBM_3_AutoML_6_20240624_233054 0.9070224 0.3062381\n5                          DRF_1_AutoML_6_20240624_233054 0.8758876 0.3153469\n6                          GBM_4_AutoML_6_20240624_233054 0.8754304 0.3070348\n      aucpr mean_per_class_error      rmse        mse\n1 0.7437070            0.1513322 0.2352370 0.05533646\n2 0.7437078            0.1513322 0.2376794 0.05649147\n3 0.7403534            0.1495953 0.2354740 0.05544803\n4 0.5767642            0.1780712 0.3024376 0.09146849\n5 0.5509419            0.2177632 0.2810417 0.07898443\n6 0.5539201            0.1789795 0.3019374 0.09116616\n\n[8 rows x 7 columns] \n\nextract_h2o_model_name_by_position &lt;- function(h2o_leaderboard, n = 1, verbose = T) {\n  \n  model_name &lt;- h2o_leaderboard %&gt;%\n    as.tibble() %&gt;%\n    slice(n) %&gt;%\n    pull(model_id)\n  \n  if (verbose) message(model_name)\n  \n  return(model_name)\n  \n}\n\nautoml_models_h2o@leaderboard %&gt;% \n  extract_h2o_model_name_by_position(1) %&gt;% \n  h2o.getModel()\n\nModel Details:\n==============\n\nH2OBinomialModel: stackedensemble\nModel ID:  StackedEnsemble_BestOfFamily_1_AutoML_6_20240624_233054 \nModel Summary for Stacked Ensemble: \n                                   key            value\n1                    Stacking strategy cross_validation\n2 Number of base models (used / total)              1/2\n3     # GBM base models (used / total)              1/1\n4     # GLM base models (used / total)              0/1\n5                Metalearner algorithm              GLM\n6   Metalearner fold assignment scheme           Random\n7                   Metalearner nfolds                5\n8              Metalearner fold_column               NA\n9   Custom metalearner hyperparameters             None\n\n\nH2OBinomialMetrics: stackedensemble\n** Reported on training data. **\n\nMSE:  0.03980472\nRMSE:  0.1995112\nLogLoss:  0.1360083\nMean Per-Class Error:  0.1194987\nAUC:  0.9718998\nAUCPR:  0.8372515\nGini:  0.9437996\n\nConfusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n         No  Yes    Error       Rate\nNo     8479  328 0.037243  =328/8807\nYes     230  910 0.201754  =230/1140\nTotals 8709 1238 0.056097  =558/9947\n\nMaximum Metrics: Maximum metrics at their respective thresholds\n                        metric threshold       value idx\n1                       max f1  0.370846    0.765349 186\n2                       max f2  0.186427    0.820919 250\n3                 max f0point5  0.542126    0.793369 132\n4                 max accuracy  0.474180    0.948025 154\n5                max precision  0.979899    1.000000   0\n6                   max recall  0.005868    1.000000 383\n7              max specificity  0.979899    1.000000   0\n8             max absolute_mcc  0.462714    0.736284 157\n9   max min_per_class_accuracy  0.174979    0.912281 254\n10 max mean_per_class_accuracy  0.186427    0.913850 250\n11                     max tns  0.979899 8807.000000   0\n12                     max fns  0.979899 1137.000000   0\n13                     max fps  0.000567 8807.000000 399\n14                     max tps  0.005868 1140.000000 383\n15                     max tnr  0.979899    1.000000   0\n16                     max fnr  0.979899    0.997368   0\n17                     max fpr  0.000567    1.000000 399\n18                     max tpr  0.005868    1.000000 383\n\nGains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\nH2OBinomialMetrics: stackedensemble\n** Reported on validation data. **\n\nMSE:  0.05699688\nRMSE:  0.2387402\nLogLoss:  0.19193\nMean Per-Class Error:  0.1447631\nAUC:  0.9394651\nAUCPR:  0.7231171\nGini:  0.8789302\n\nConfusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n         No Yes    Error       Rate\nNo     1937 148 0.070983  =148/2085\nYes      66 236 0.218543    =66/302\nTotals 2003 384 0.089652  =214/2387\n\nMaximum Metrics: Maximum metrics at their respective thresholds\n                        metric threshold       value idx\n1                       max f1  0.235350    0.688047 222\n2                       max f2  0.126084    0.769231 271\n3                 max f0point5  0.523812    0.720268 128\n4                 max accuracy  0.523812    0.924173 128\n5                max precision  0.857546    0.904762  25\n6                   max recall  0.004454    1.000000 386\n7              max specificity  0.962428    0.999520   0\n8             max absolute_mcc  0.232775    0.642938 223\n9   max min_per_class_accuracy  0.117448    0.877483 276\n10 max mean_per_class_accuracy  0.098896    0.880113 284\n11                     max tns  0.962428 2084.000000   0\n12                     max fns  0.962428  302.000000   0\n13                     max fps  0.000510 2085.000000 399\n14                     max tps  0.004454  302.000000 386\n15                     max tnr  0.962428    0.999520   0\n16                     max fnr  0.962428    1.000000   0\n17                     max fpr  0.000510    1.000000 399\n18                     max tpr  0.004454    1.000000 386\n\nGains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\nH2OBinomialMetrics: stackedensemble\n** Reported on cross-validation data. **\n** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n\nMSE:  0.05425121\nRMSE:  0.2329189\nLogLoss:  0.17988\nMean Per-Class Error:  0.1729684\nAUC:  0.9436691\nAUCPR:  0.7062248\nGini:  0.8873382\n\nConfusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n          No  Yes    Error         Rate\nNo     11597  612 0.050127   =612/12209\nYes      473 1126 0.295810    =473/1599\nTotals 12070 1738 0.078578  =1085/13808\n\nMaximum Metrics: Maximum metrics at their respective thresholds\n                        metric threshold        value idx\n1                       max f1  0.361929     0.674858 191\n2                       max f2  0.101590     0.752962 301\n3                 max f0point5  0.568730     0.690663 122\n4                 max accuracy  0.491365     0.925913 148\n5                max precision  0.985086     1.000000   0\n6                   max recall  0.001473     1.000000 396\n7              max specificity  0.985086     1.000000   0\n8             max absolute_mcc  0.418889     0.632649 172\n9   max min_per_class_accuracy  0.126088     0.872471 287\n10 max mean_per_class_accuracy  0.101590     0.880322 301\n11                     max tns  0.985086 12209.000000   0\n12                     max fns  0.985086  1598.000000   0\n13                     max fps  0.000332 12209.000000 399\n14                     max tps  0.001473  1599.000000 396\n15                     max tnr  0.985086     1.000000   0\n16                     max fnr  0.985086     0.999375   0\n17                     max fpr  0.000332     1.000000 399\n18                     max tpr  0.001473     1.000000 396\n\nGains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\nCross-Validation Metrics Summary: \n                mean        sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\naccuracy    0.925544  0.004586   0.930416   0.929035   0.926407   0.922497\nauc         0.943698  0.003699   0.948186   0.946199   0.942446   0.938560\nerr         0.074456  0.004586   0.069584   0.070965   0.073593   0.077503\nerr_count 205.800000 17.152260 194.000000 186.000000 204.000000 216.000000\nf0point5    0.678563  0.018021   0.695067   0.681029   0.694268   0.670520\n          cv_5_valid\naccuracy    0.919366\nauc         0.943100\nerr         0.080634\nerr_count 229.000000\nf0point5    0.651931\n\n---\n                        mean        sd cv_1_valid cv_2_valid  cv_3_valid\nprecision           0.677374  0.026046   0.697749   0.682927    0.703226\nr2                  0.470248  0.011549   0.481763   0.473854    0.478286\nrecall              0.685129  0.018774   0.684543   0.673539    0.660606\nresidual_deviance 993.331540 58.421497 961.267940 909.583100 1008.085400\nrmse                0.232826  0.004611   0.228527   0.227882    0.233912\nspecificity         0.956998  0.006683   0.961959   0.960944    0.962326\n                   cv_4_valid  cv_5_valid\nprecision            0.662857    0.640110\nr2                   0.453419    0.463918\nrecall               0.703030    0.703928\nresidual_deviance 1055.826800 1031.894300\nrmse                 0.238864    0.234943\nspecificity          0.951974    0.947788\n\n# 5 & 6) Save and predicting using Leader Model\n\nh2o.getModel(\"StackedEnsemble_BestOfFamily_2_AutoML_3_20240624_225721\") %&gt;% \n  h2o.saveModel(path = \"h20_models/\", force = TRUE)\n\n[1] \"C:\\\\Users\\\\Drew Gilmore\\\\Documents\\\\GitHub\\\\ss24-bdml-DrewGH99\\\\h20_models\\\\StackedEnsemble_BestOfFamily_2_AutoML_3_20240624_225721\"\n\nstacked_ensemble_h2o &lt;- h2o.loadModel(\"h20_models/StackedEnsemble_BestOfFamily_2_AutoML_3_20240624_225721\")\n\npredictions &lt;- h2o.predict(stacked_ensemble_h2o, newdata = as.h2o(test_tbl))\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntypeof(predictions)\n\n[1] \"environment\"\n\npredictions_tbl &lt;- predictions %&gt;% as_tibble()\n\npredictions_tbl %&gt;% head(10)\n\n# A tibble: 10 × 3\n   predict    No   Yes\n   &lt;fct&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1 Yes     0.102 0.898\n 2 Yes     0.114 0.886\n 3 Yes     0.190 0.810\n 4 Yes     0.137 0.863\n 5 Yes     0.320 0.680\n 6 Yes     0.149 0.851\n 7 Yes     0.245 0.755\n 8 Yes     0.605 0.395\n 9 Yes     0.411 0.589\n10 No      0.757 0.243"
  },
  {
    "objectID": "Challenge05.html",
    "href": "Challenge05.html",
    "title": "Performance Measures",
    "section": "",
    "text": "library(tidyverse)\nlibrary(rsample)\nlibrary(recipes)\nlibrary(ggplot2)\nlibrary(h2o)\nlibrary(cowplot)\nlibrary(glue)\n\n# 1) Load the training & test dataset ----\n\nbackorders_tbl &lt;- read_csv(\"Challenge 4/product_backorders.csv\")\n\n# 2) Specifiy the response and predictor variables ----\n\nprocessed_tbl &lt;- backorders_tbl %&gt;%\n  mutate_if(is.character, as.factor) \n\n# Split Data\nset.seed(seed = 1114)\nsplit_obj &lt;- rsample::initial_split(processed_tbl, prop = 0.85)\n\n# Assign training and test data\ntrain_readable_tbl &lt;- training(split_obj)\ntest_readable_tbl  &lt;- testing(split_obj)\n\nrecipe_obj &lt;- recipe(went_on_backorder ~ ., data = train_readable_tbl) %&gt;%\n  step_zv(all_predictors()) %&gt;%\n  prep()\n\ntrain_tbl &lt;- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  &lt;- bake(recipe_obj, new_data = test_readable_tbl)\n\n# 3) Run AutoML specifying the stopping criterion ----\n\n\nh2o.init()\n\n Connection successful!\n\nR is connected to the H2O cluster: \n    H2O cluster uptime:         7 hours 1 minutes \n    H2O cluster timezone:       Europe/Berlin \n    H2O data parsing timezone:  UTC \n    H2O cluster version:        3.44.0.3 \n    H2O cluster version age:    6 months and 5 days \n    H2O cluster name:           H2O_started_from_R_Drew_Gilmore_mvf229 \n    H2O cluster total nodes:    1 \n    H2O cluster total memory:   1.17 GB \n    H2O cluster total cores:    4 \n    H2O cluster allowed cores:  4 \n    H2O cluster healthy:        TRUE \n    H2O Connection ip:          localhost \n    H2O Connection port:        54321 \n    H2O Connection proxy:       NA \n    H2O Internal Security:      FALSE \n    R Version:                  R version 4.4.0 (2024-04-24 ucrt) \n\nsplit_h2o &lt;- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1385)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o &lt;- split_h2o[[1]]\nvalid_h2o &lt;- split_h2o[[2]]\ntest_h2o  &lt;- as.h2o(test_tbl)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Set the target and predictors\ny &lt;- \"went_on_backorder\"\nx &lt;- setdiff(names(train_h2o), y)\n\nautoml_models_h2o &lt;- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 230 ,\n  nfolds            = 5 \n)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |==                                                                    |   2%\n23:38:12.928: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n23:38:12.931: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |=====                                                                 |   7%\n  |                                                                            \n  |======                                                                |   8%\n  |                                                                            \n  |=======                                                               |   9%\n  |                                                                            \n  |=======                                                               |  11%\n  |                                                                            \n  |=========                                                             |  12%\n  |                                                                            \n  |===========                                                           |  15%\n  |                                                                            \n  |===========                                                           |  16%\n  |                                                                            \n  |==============                                                        |  20%\n  |                                                                            \n  |===============                                                       |  21%\n  |                                                                            \n  |================                                                      |  22%\n  |                                                                            \n  |==================                                                    |  26%\n  |                                                                            \n  |===================                                                   |  27%\n  |                                                                            \n  |======================                                                |  31%\n  |                                                                            \n  |=======================                                               |  32%\n  |                                                                            \n  |========================                                              |  34%\n  |                                                                            \n  |=========================                                             |  35%\n  |                                                                            \n  |==========================                                            |  38%\n  |                                                                            \n  |=============================                                         |  41%\n  |                                                                            \n  |==============================                                        |  42%\n  |                                                                            \n  |================================                                      |  46%\n  |                                                                            \n  |=================================                                     |  47%\n  |                                                                            \n  |==================================                                    |  49%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |=====================================                                 |  53%\n  |                                                                            \n  |======================================                                |  54%\n  |                                                                            \n  |=======================================                               |  55%\n  |                                                                            \n  |==========================================                            |  59%\n  |                                                                            \n  |==========================================                            |  61%\n  |                                                                            \n  |============================================                          |  63%\n  |                                                                            \n  |=============================================                         |  64%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |================================================                      |  69%\n  |                                                                            \n  |===================================================                   |  73%\n  |                                                                            \n  |====================================================                  |  74%\n  |                                                                            \n  |=====================================================                 |  75%\n  |                                                                            \n  |=======================================================               |  78%\n  |                                                                            \n  |========================================================              |  80%\n  |                                                                            \n  |=========================================================             |  81%\n  |                                                                            \n  |=============================================================         |  88%\n  |                                                                            \n  |================================================================      |  91%\n  |                                                                            \n  |==================================================================    |  94%\n  |                                                                            \n  |====================================================================  |  97%\n  |                                                                            \n  |===================================================================== |  98%\n  |                                                                            \n  |======================================================================| 100%\n\nautoml_models_h2o@leaderboard\n\n                                                 model_id       auc   logloss\n1 StackedEnsemble_BestOfFamily_3_AutoML_8_20240625_233812 0.9563545 0.1747001\n2    StackedEnsemble_AllModels_2_AutoML_8_20240625_233812 0.9559671 0.1733442\n3    StackedEnsemble_AllModels_3_AutoML_8_20240625_233812 0.9544621 0.1774736\n4    StackedEnsemble_AllModels_1_AutoML_8_20240625_233812 0.9541242 0.1758023\n5 StackedEnsemble_BestOfFamily_2_AutoML_8_20240625_233812 0.9537802 0.1794509\n6                          GBM_4_AutoML_8_20240625_233812 0.9534626 0.1818408\n      aucpr mean_per_class_error      rmse        mse\n1 0.7619469            0.1286462 0.2310317 0.05337564\n2 0.7682825            0.1183912 0.2297318 0.05277670\n3 0.7620594            0.1250400 0.2312735 0.05348744\n4 0.7610027            0.1089044 0.2309589 0.05334203\n5 0.7486168            0.1450165 0.2336830 0.05460776\n6 0.7504468            0.1321882 0.2357761 0.05559038\n\n[25 rows x 7 columns]"
  },
  {
    "objectID": "Challenge05.html#high-max-runtime-to-find-deeplearning-model",
    "href": "Challenge05.html#high-max-runtime-to-find-deeplearning-model",
    "title": "Performance Measures",
    "section": "",
    "text": "library(tidyverse)\nlibrary(rsample)\nlibrary(recipes)\nlibrary(ggplot2)\nlibrary(h2o)\nlibrary(cowplot)\nlibrary(glue)\n\n# 1) Load the training & test dataset ----\n\nbackorders_tbl &lt;- read_csv(\"Challenge 4/product_backorders.csv\")\n\n# 2) Specifiy the response and predictor variables ----\n\nprocessed_tbl &lt;- backorders_tbl %&gt;%\n  mutate_if(is.character, as.factor) \n\n# Split Data\nset.seed(seed = 1114)\nsplit_obj &lt;- rsample::initial_split(processed_tbl, prop = 0.85)\n\n# Assign training and test data\ntrain_readable_tbl &lt;- training(split_obj)\ntest_readable_tbl  &lt;- testing(split_obj)\n\nrecipe_obj &lt;- recipe(went_on_backorder ~ ., data = train_readable_tbl) %&gt;%\n  step_zv(all_predictors()) %&gt;%\n  prep()\n\ntrain_tbl &lt;- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  &lt;- bake(recipe_obj, new_data = test_readable_tbl)\n\n# 3) Run AutoML specifying the stopping criterion ----\n\n\nh2o.init()\n\n Connection successful!\n\nR is connected to the H2O cluster: \n    H2O cluster uptime:         7 hours 1 minutes \n    H2O cluster timezone:       Europe/Berlin \n    H2O data parsing timezone:  UTC \n    H2O cluster version:        3.44.0.3 \n    H2O cluster version age:    6 months and 5 days \n    H2O cluster name:           H2O_started_from_R_Drew_Gilmore_mvf229 \n    H2O cluster total nodes:    1 \n    H2O cluster total memory:   1.17 GB \n    H2O cluster total cores:    4 \n    H2O cluster allowed cores:  4 \n    H2O cluster healthy:        TRUE \n    H2O Connection ip:          localhost \n    H2O Connection port:        54321 \n    H2O Connection proxy:       NA \n    H2O Internal Security:      FALSE \n    R Version:                  R version 4.4.0 (2024-04-24 ucrt) \n\nsplit_h2o &lt;- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1385)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o &lt;- split_h2o[[1]]\nvalid_h2o &lt;- split_h2o[[2]]\ntest_h2o  &lt;- as.h2o(test_tbl)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Set the target and predictors\ny &lt;- \"went_on_backorder\"\nx &lt;- setdiff(names(train_h2o), y)\n\nautoml_models_h2o &lt;- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 230 ,\n  nfolds            = 5 \n)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |==                                                                    |   2%\n23:38:12.928: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n23:38:12.931: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |=====                                                                 |   7%\n  |                                                                            \n  |======                                                                |   8%\n  |                                                                            \n  |=======                                                               |   9%\n  |                                                                            \n  |=======                                                               |  11%\n  |                                                                            \n  |=========                                                             |  12%\n  |                                                                            \n  |===========                                                           |  15%\n  |                                                                            \n  |===========                                                           |  16%\n  |                                                                            \n  |==============                                                        |  20%\n  |                                                                            \n  |===============                                                       |  21%\n  |                                                                            \n  |================                                                      |  22%\n  |                                                                            \n  |==================                                                    |  26%\n  |                                                                            \n  |===================                                                   |  27%\n  |                                                                            \n  |======================                                                |  31%\n  |                                                                            \n  |=======================                                               |  32%\n  |                                                                            \n  |========================                                              |  34%\n  |                                                                            \n  |=========================                                             |  35%\n  |                                                                            \n  |==========================                                            |  38%\n  |                                                                            \n  |=============================                                         |  41%\n  |                                                                            \n  |==============================                                        |  42%\n  |                                                                            \n  |================================                                      |  46%\n  |                                                                            \n  |=================================                                     |  47%\n  |                                                                            \n  |==================================                                    |  49%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |=====================================                                 |  53%\n  |                                                                            \n  |======================================                                |  54%\n  |                                                                            \n  |=======================================                               |  55%\n  |                                                                            \n  |==========================================                            |  59%\n  |                                                                            \n  |==========================================                            |  61%\n  |                                                                            \n  |============================================                          |  63%\n  |                                                                            \n  |=============================================                         |  64%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |================================================                      |  69%\n  |                                                                            \n  |===================================================                   |  73%\n  |                                                                            \n  |====================================================                  |  74%\n  |                                                                            \n  |=====================================================                 |  75%\n  |                                                                            \n  |=======================================================               |  78%\n  |                                                                            \n  |========================================================              |  80%\n  |                                                                            \n  |=========================================================             |  81%\n  |                                                                            \n  |=============================================================         |  88%\n  |                                                                            \n  |================================================================      |  91%\n  |                                                                            \n  |==================================================================    |  94%\n  |                                                                            \n  |====================================================================  |  97%\n  |                                                                            \n  |===================================================================== |  98%\n  |                                                                            \n  |======================================================================| 100%\n\nautoml_models_h2o@leaderboard\n\n                                                 model_id       auc   logloss\n1 StackedEnsemble_BestOfFamily_3_AutoML_8_20240625_233812 0.9563545 0.1747001\n2    StackedEnsemble_AllModels_2_AutoML_8_20240625_233812 0.9559671 0.1733442\n3    StackedEnsemble_AllModels_3_AutoML_8_20240625_233812 0.9544621 0.1774736\n4    StackedEnsemble_AllModels_1_AutoML_8_20240625_233812 0.9541242 0.1758023\n5 StackedEnsemble_BestOfFamily_2_AutoML_8_20240625_233812 0.9537802 0.1794509\n6                          GBM_4_AutoML_8_20240625_233812 0.9534626 0.1818408\n      aucpr mean_per_class_error      rmse        mse\n1 0.7619469            0.1286462 0.2310317 0.05337564\n2 0.7682825            0.1183912 0.2297318 0.05277670\n3 0.7620594            0.1250400 0.2312735 0.05348744\n4 0.7610027            0.1089044 0.2309589 0.05334203\n5 0.7486168            0.1450165 0.2336830 0.05460776\n6 0.7504468            0.1321882 0.2357761 0.05559038\n\n[25 rows x 7 columns]"
  },
  {
    "objectID": "Challenge06.html",
    "href": "Challenge06.html",
    "title": "Explainable Black-Box Models with LIME",
    "section": "",
    "text": "Script\n\nlibrary(h2o)\n\n\n----------------------------------------------------------------------\n\nYour next step is to start H2O:\n    &gt; h2o.init()\n\nFor H2O package documentation, ask for help:\n    &gt; ??h2o\n\nAfter starting H2O, you can use the Web UI at http://localhost:54321\nFor more information visit https://docs.h2o.ai\n\n----------------------------------------------------------------------\n\n\n\nAttaching package: 'h2o'\n\n\nThe following objects are masked from 'package:stats':\n\n    cor, sd, var\n\n\nThe following objects are masked from 'package:base':\n\n    %*%, %in%, &&, ||, apply, as.factor, as.numeric, colnames,\n    colnames&lt;-, ifelse, is.character, is.factor, is.numeric, log,\n    log10, log1p, log2, round, signif, trunc\n\nlibrary(recipes)\n\nLoading required package: dplyr\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\n\nAttaching package: 'recipes'\n\n\nThe following object is masked from 'package:stats':\n\n    step\n\nlibrary(readxl)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.5.1     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ lubridate::day()   masks h2o::day()\n✖ dplyr::filter()    masks stats::filter()\n✖ stringr::fixed()   masks recipes::fixed()\n✖ lubridate::hour()  masks h2o::hour()\n✖ dplyr::lag()       masks stats::lag()\n✖ lubridate::month() masks h2o::month()\n✖ lubridate::week()  masks h2o::week()\n✖ lubridate::year()  masks h2o::year()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidyquant)\n\nLoading required package: PerformanceAnalytics\nLoading required package: xts\nLoading required package: zoo\n\nAttaching package: 'zoo'\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\n\n######################### Warning from 'xts' package ##########################\n#                                                                             #\n# The dplyr lag() function breaks how base R's lag() function is supposed to  #\n# work, which breaks lag(my_xts). Calls to lag(my_xts) that you type or       #\n# source() into this session won't work correctly.                            #\n#                                                                             #\n# Use stats::lag() to make sure you're not using dplyr::lag(), or you can add #\n# conflictRules('dplyr', exclude = 'lag') to your .Rprofile to stop           #\n# dplyr from breaking base R's lag() function.                                #\n#                                                                             #\n# Code in packages is not affected. It's protected by R's namespace mechanism #\n# Set `options(xts.warn_dplyr_breaks_lag = FALSE)` to suppress this warning.  #\n#                                                                             #\n###############################################################################\n\nAttaching package: 'xts'\n\nThe following objects are masked from 'package:dplyr':\n\n    first, last\n\n\nAttaching package: 'PerformanceAnalytics'\n\nThe following object is masked from 'package:graphics':\n\n    legend\n\nLoading required package: quantmod\nLoading required package: TTR\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n\nlibrary(lime)\n\nWarning: package 'lime' was built under R version 4.4.1\n\n\n\nAttaching package: 'lime'\n\nThe following object is masked from 'package:dplyr':\n\n    explain\n\n# h2o modeling ----\nemployee_attrition_tbl &lt;- read_csv(\"Challenge 4/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\n\nRows: 1470 Columns: 35\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (9): Attrition, BusinessTravel, Department, EducationField, Gender, Job...\ndbl (26): Age, DailyRate, DistanceFromHome, Education, EmployeeCount, Employ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndefinitions_raw_tbl    &lt;- read_excel(\"Challenge 4/data_definitions.xlsx\", sheet = 1, col_names = FALSE)\n\nNew names:\n• `` -&gt; `...1`\n• `` -&gt; `...2`\n\n# Processing Pipeline\nsource(\"Challenge 4/data_processing_pipeline.R\")\n\nemployee_attrition_readable_tbl &lt;- process_hr_data_readable(employee_attrition_tbl, definitions_raw_tbl)\n\nJoining with `by = join_by(Education)`\nJoining with `by = join_by(EnvironmentSatisfaction)`\nJoining with `by = join_by(JobInvolvement)`\nJoining with `by = join_by(JobSatisfaction)`\nJoining with `by = join_by(PerformanceRating)`\nJoining with `by = join_by(RelationshipSatisfaction)`\nJoining with `by = join_by(WorkLifeBalance)`\n\nlibrary(rsample)\n# Split into test and train\nset.seed(seed = 1113)\nsplit_obj &lt;- rsample::initial_split(employee_attrition_readable_tbl, prop = 0.85)\n\n# Assign training and test data\ntrain_readable_tbl &lt;- training(split_obj)\ntest_readable_tbl  &lt;- testing(split_obj)\n\n# ML Preprocessing Recipe \nrecipe_obj &lt;- recipe(Attrition ~ ., data = train_readable_tbl) %&gt;%\n  step_zv(all_predictors()) %&gt;%\n  step_mutate_at(c(\"JobLevel\", \"StockOptionLevel\"), fn = as.factor) %&gt;% \n  prep()\n\nrecipe_obj\n\n\n── Recipe ──────────────────────────────────────────────────────────────────────\n\n── Inputs \nNumber of variables by role\noutcome:    1\npredictor: 34\n\n── Training information \nTraining data contained 1249 data points and no incomplete rows.\n\n── Operations \n• Zero variance filter removed: EmployeeCount and Over18, ... | Trained\n• Variable mutation for: JobLevel and StockOptionLevel | Trained\n\ntrain_tbl &lt;- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  &lt;- bake(recipe_obj, new_data = test_readable_tbl)\n\nh2o.init()\n\n Connection successful!\n\nR is connected to the H2O cluster: \n    H2O cluster uptime:         15 minutes 55 seconds \n    H2O cluster timezone:       Europe/Berlin \n    H2O data parsing timezone:  UTC \n    H2O cluster version:        3.44.0.3 \n    H2O cluster version age:    6 months and 5 days \n    H2O cluster name:           H2O_started_from_R_Drew_Gilmore_drs368 \n    H2O cluster total nodes:    1 \n    H2O cluster total memory:   1.66 GB \n    H2O cluster total cores:    4 \n    H2O cluster allowed cores:  4 \n    H2O cluster healthy:        TRUE \n    H2O Connection ip:          localhost \n    H2O Connection port:        54321 \n    H2O Connection proxy:       NA \n    H2O Internal Security:      FALSE \n    R Version:                  R version 4.4.0 (2024-04-24 ucrt) \n\n\nWarning in h2o.clusterInfo(): \nYour H2O cluster version is (6 months and 5 days) old. There may be a newer version available.\nPlease download and install the latest version from: https://h2o-release.s3.amazonaws.com/h2o/latest_stable.html\n\n## Split data ----\nsplit_h2o &lt;- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o &lt;- split_h2o[[1]]\nvalid_h2o &lt;- split_h2o[[2]]\ntest_h2o  &lt;- as.h2o(test_tbl)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n## Set the target and predictors ----\ny &lt;- \"Attrition\"\nx &lt;- setdiff(names(train_h2o), y)\n\n## train data\nautoml_models_h2o &lt;- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 30,\n  nfolds            = 5 \n)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |===                                                                   |   5%\n14:27:02.354: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n14:27:02.356: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |===========                                                           |  15%\n  |                                                                            \n  |===================                                                   |  27%\n  |                                                                            \n  |==========================                                            |  37%\n  |                                                                            \n  |==================================                                    |  48%\n  |                                                                            \n  |=========================================                             |  58%\n  |                                                                            \n  |=================================================                     |  71%\n  |                                                                            \n  |=========================================================             |  81%\n  |                                                                            \n  |===================================================================== |  99%\n  |                                                                            \n  |======================================================================| 100%\n\nautoml_leader_id &lt;- automl_models_h2o@leader@model_id\npath &lt;- (\"h20_models/Challenge 6/\")\nautoml_leader_path &lt;- paste0(path, automl_leader_id)\n\nh2o.getModel(automl_models_h2o@leader@model_id) %&gt;%\n  h2o.saveModel(path = \"h20_models/Challenge 6/\", force = T)\n\n[1] \"C:\\\\Users\\\\Drew Gilmore\\\\Documents\\\\GitHub\\\\ss24-bdml-DrewGH99\\\\h20_models\\\\Challenge 6\\\\StackedEnsemble_BestOfFamily_2_AutoML_3_20240626_142702\"\n\nautoml_leader &lt;- h2o.loadModel(automl_leader_path)\n\npredictions_tbl &lt;- automl_leader %&gt;% \n  h2o.predict(newdata = as.h2o(test_tbl)) %&gt;%\n  as.tibble() %&gt;%\n  bind_cols(\n    test_tbl %&gt;%\n      select(Attrition, EmployeeNumber)\n  )\n\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\nℹ Please use `as_tibble()` instead.\nℹ The signature and semantics have changed, see `?as_tibble`.\n\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Create Explainer ----\n\nexplainer &lt;- train_tbl %&gt;%\n  select(-Attrition) %&gt;%\n  lime(\n    model           = automl_leader,\n    bin_continuous  = TRUE,\n    n_bins          = 4,\n    quantile_bins   = TRUE\n  )\n\n# Create Explanation ----\n\nexplanation &lt;- test_tbl %&gt;%\n  slice(1) %&gt;%\n  select(-Attrition) %&gt;%\n  lime::explain(\n    \n    # Pass our explainer object\n    explainer = explainer,\n    # Because it is a binary classification model: 1\n    n_labels   = 1,\n    # number of features to be returned\n    n_features = 8,\n    # number of localized linear models\n    n_permutations = 5000,\n    # Let's start with 1\n    kernel_width   = 1\n  )\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n## Multiple Explanations ----\n\nexplanation &lt;- test_tbl %&gt;%\n  slice(1:20) %&gt;%\n  select(-Attrition) %&gt;%\n  lime::explain(\n    explainer = explainer,\n    n_labels   = 1,\n    n_features = 8,\n    n_permutations = 5000,\n    kernel_width   = 0.5\n  )\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\n\n\nChallenge Part 1\n\n# Challenge Part 1 ----\n\ncase_1 &lt;- explanation %&gt;%\n  filter(case == 1)\n\n#case_1 %&gt;%\n  #plot_features()\n\n\nlabel_both_upper &lt;- function(labels, multi_line = TRUE, sep = ': ') {\n  #names(labels) &lt;- toTitleCase(names(labels))\n  label_both(labels, multi_line, sep)\n}\n  \n\ncase_1$type &lt;- factor(ifelse(sign(case_1$feature_weight) == 1, 'Supports', 'Contradicts'))\ndescription &lt;- paste0(case_1$case, '_', case_1[['label']])\ndesc_width &lt;- max(nchar(description)) + 1\ndescription &lt;- paste0(format(description, width = desc_width), case_1$feature_desc)\ncase_1$description &lt;- factor(description, levels = description[order(abs(case_1$feature_weight))])\ncase_1$case &lt;- factor(case_1$case, unique(case_1$case))\ncase_1$`case_1 fit` &lt;- format(case_1$model_r2, digits = 2)\n\n\ncase_1$probability &lt;- format(case_1$label_prob, digits = 2)\ncase_1$label &lt;- factor(case_1$label, unique(case_1$label[order(case_1$label_prob, decreasing = TRUE)]))\np &lt;- ggplot(case_1) +\n  facet_wrap(~ case + label + probability + `case_1 fit`, scales = 'free_y', ncol = 2, labeller = label_both_upper)\n\np +\n  geom_col(aes_(~description, ~feature_weight, fill = ~type)) +\n  coord_flip() +\n  scale_fill_manual(values = c('lightcoral', 'green3'), drop = FALSE) +\n  scale_x_discrete(labels = function(lab) substr(lab, desc_width + 1, nchar(lab))) +\n  labs(y = 'Weight', x = 'Feature', fill = '') +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nChallenge Part 2\n\n# Challenge Part 2 ----\n\nexplanation$feature_desc &lt;- factor(\n  explanation$feature_desc,\n  levels = rev(unique(explanation$feature_desc[order(explanation$feature, explanation$feature_value)]))\n)\np &lt;- ggplot(explanation, aes_(~case, ~feature_desc)) +\n  geom_tile(aes_(fill = ~feature_weight)) +\n  scale_x_discrete('Case', expand = c(0, 0)) +\n  scale_y_discrete('Feature', expand = c(0, 0)) +\n  scale_fill_gradient2('Feature\\nweight', low = 'lightcoral', mid = '#f7f7f7', high = 'green3') +\n  theme_minimal() +\n  theme(panel.border = element_rect(fill = NA, colour = 'grey60', size = 1),\n        panel.grid = element_blank(),\n        legend.position = 'right',\n        axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))\np"
  }
]